<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//need to randomize or it will put the initial block in the same place every time
randomize()

//Create game board and a copy of it that will be used to do the animation
//board will track the current state of the game while oldBoard will be used
//to move the pieces (need to know where the pieces are coming from and where
//they are going
size = 4
board = ds_grid_create(size,size)
oldBoard = ds_grid_create(size,size)

//initialize variables
availableBlocks = 16
addedBlock = false
play = true
moveCount = 0
moved = false
moving = false
combine[0] = false
combine[1] = false
combine[2] = false
combine[3] = false
tryRight = false
tryLeft = false
tryUp = false
tryDown = false
whiteTiles = 0
allowedWhites = 4

//set all squares to noone
ds_grid_set_region(board,0,0,size-1,size-1,noone)
ds_grid_copy(oldBoard,board)

//create two initial squares
repeat(2){
    createBlock()
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//command is reading our move input; curObj is the current Object we are looking at
var command = -1
var curObj = ""

//check player input
if(play){
    if(keyboard_check_pressed(vk_up))
        command=0;
    if(keyboard_check_pressed(vk_right))
        command=3;
    if(keyboard_check_pressed(vk_down))
        command=2;
    if(keyboard_check_pressed(vk_left))
        command=1;
}

//find where the squares need to go if there are no squares currently moving
//this prevents reading input while the squares are being moved
if(command==1 and moveCount == 0){
    moveLeft(board)
    if(availableBlocks == 0){
        tryLeft = true
    }
}
if(command==3 and moveCount == 0){
    moveRight(board)
    if(availableBlocks == 0){
        tryRight = true
    }
}
if(command==0 and moveCount == 0){
    moveUp(board)
    if(availableBlocks == 0){
        tryUp = true
    }
}
if(command==2 and moveCount == 0){
    moveDown(board)
    if(availableBlocks == 0){
        tryDown = true
    }
}

//check for game over
if(tryLeft and tryRight and tryUp and tryDown and moving == false and availableBlocks == 0){
    game_end()
}

//if we are moving, lets do animation
if(moving == true){
    //reset the move counter
    moveCount = 0
    
    //move the squares - animation part
    //we will count if any movements occur to prevent any other input
    
    for(var i=0; i &lt; size; i++){
        for(var j=0; j &lt; size; j++){
            curObj = ds_grid_get(oldBoard,i,j)
            if (curObj != noone and curObj.moving){
                moveCount = moveCount + moveSquare(curObj,curObj.myDirection,oldBoard,i,j)
            }
        }
    }
}

//if we find movement, we want to note that a movement did occur
if (moveCount &gt; 0){
    moved = true
}

//destroy blocks that need to be destroyed only if no movement just occured but some movement happened and convert full white blocks into rainbow blocks
if(moveCount == 0 and moved == true){
    for(var i=0; i &lt; size; i++){
        for(var j=0; j &lt; size; j++){
            curObj = ds_grid_get(oldBoard,i,j)
            if (curObj != noone){
                if (curObj.destroy == true){
                    with(curObj) {instance_destroy()}
                }
                else if(curObj.color == 7){
                    if(isRainbow(curObj)){
                        curObj.color = 8
                        whiteTiles--
                        with (curObj) {
                            sprite_index = spr_rainbow
                        }
                        destroyStripes(curObj)
                    }
                }
            }
        }
    }
    //once we clear our the old blocks, create a new one and reset our movement variables
    
    //how many spots open?
    availableBlocks = openSpaces()
    
    //try to create two blocks
    repeat(2){
        createBlock()
    }
    moved = false
    moving = false
}

//enlarge spawning objects
for(var i=0; i &lt; size; i++){
    for(var j=0; j &lt; size; j++){
        curObj = ds_grid_get(oldBoard,i,j)
        if (curObj != noone){
            if(curObj.spawning == true){
                with(curObj){
                    if(image_xscale != 1 and image_yscale != 1){
                        image_xscale += 0.1
                        image_yscale += 0.1
                    }
                    else{
                        curObj.spawning = false
                    }
                }
            }
        }
    }
}

//if we have open spots, reset the end game move flags
if(availableBlocks != 0){
    tryLeft = false
    tryRight = false
    tryUp = false
    tryDown = false
}

//way to quit
if (keyboard_check_pressed(vk_escape)){
    game_end()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
